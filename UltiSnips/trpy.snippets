###############################################################################
# File: UltiSnips/trpy.snippets
# Author: Jean Cavallo <jean.cavallo@hotmail.fr>
# License: MIT license
#     Permission is hereby granted, free of charge, to any person obtaining
#     a copy of this software and associated documentation files (the
#     "Software"), to deal in the Software without restriction, including
#     without limitation the rights to use, copy, modify, merge, publish,
#     distribute, sublicense, and/or sell copies of the Software, and to
#     permit persons to whom the Software is furnished to do so, subject to
#     the following conditions:
#
#     The above copyright notice and this permission notice shall be included
#     in all copies or substantial portions of the Software.
#
#     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
#     OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
#     MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#     IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
#     CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
#     TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
#     SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
###############################################################################

snippet defset "def __setup__(cls): ..." b
@classmethod
def __setup__(cls):
    ${1}super(${2:Class Name}, cls).__setup__()
    ${3}
endsnippet

snippet fibo "Tryton Boolean Field" b
    ${1:field_name} = fields.Boolean('${2:field_name}'${3:, ${4}})${5}
endsnippet

snippet fich "Tryton Char Field" b
${1:field_name} = fields.Char('${2:field_name}'${3:, ${4}})${5}
endsnippet

snippet fida "Tryton Date" b
${1:field_name} = fields.Date('${2:field_name}'${3:, ${4}})${5}
endsnippet

snippet fiin "Tryton Integer Field" b
${1:field_name} = fields.Integer('${2:field_name}'${3:, ${4}})${5}
endsnippet

snippet finu "Tryton Numeric" b
${1:field_name} = fields.Numeric('${2:field_name}'${3:, digits=${4:(16,
        ${5:Eval('currency_digits')}}})${0}
endsnippet

snippet fite "Tryton Text ${1:field_name}" b
fields.Text('${2:field_name}'${3:, ${4}})${5}" b
endsnippet

snippet fimo "Tryton Many2One" b
${1:field_name} = fields.Many2One('${2:model_name}', '${3:field_name}'
    ${4:, ${5}})${6}
endsnippet

snippet fiom "Tryton One2Many" b
${1:field_name} = fields.One2Many('${2:model_name}', '${3:back_ref}',
    '${4:field_name}'${5:, ${6}})${6}
endsnippet

snippet fiod "Tryton One2ManyDomain" b
${1:field_name} = fields.One2ManyDomain('${2:model_name}', '${3:reverse_field_name}',
'${4:field_name}', domain=[
        ('${5:attribute_name}', '${6:operand}', ${7:value}),${8}
    ],${9})${10}
endsnippet

snippet fimm "Tryton Many2Many" b
${1:field_name} = fields.Many2Many('${2:m2m_relation_name}',
    '${3:origin}', '${4:target}', '${5:field_name}'${6:, ${7}})${8}
endsnippet

snippet fise "Tryton Selection" b
${1:field_name} = fields.Selection(${2:[('${3}', '${4}')${5:,
    ${6}}]}${7:'${8:selection_method}'}, '${9:name}'${10:, ${11}})${12}
endsnippet

snippet fifubo "Tryton Function Boolean" b
${1:field_name} = fields.Function(
    fields.Boolean('${2:name}'${3:, ${4}}),
    '${5:get_$1}'${6:, setter='${7:set_$1}'}${8:, searcher='${9:search_$1}'})${10}
endsnippet

snippet fifuch "Tryton Function Char" b
${1:field_name} = fields.Function(
    fields.Char('${2:name}'${3:, ${4}}),
    '${5:get_$1}'${6:, setter='${7:set_$1}'}${8:, searcher='${9:search_$1}'})${10}
endsnippet

snippet fifute "Tryton Function Text" b
${1:field_name} = fields.Function(
    fields.Text('${2:name}'${3:, ${4}}),
    '${5:get_$1}'${6:, setter='${7:set_$1}'}${8:, searcher='${9:search_$1}'})${10}
endsnippet

snippet fifuse "Tryton Function Selection" b
${1:field_name} = fields.Function(
    fields.Selection(${2:[('${3}', '${4}')${5:,
        ${6}}]}${7:'${8:selection_method}'}, '${9:name}'${10:, ${11}}),
    '${12:get_$1}'${13:, setter='${14:set_$1}'}${15:, searcher='${16:search_$1}'})${17}
endsnippet

snippet fifute "Tryton Function Many2One" b
${1:field_name} = fields.Function(
    fields.Many2One('${2:model_name}', '${3:field_name}'
        ${4:, ${5}}),
    '${6:get_$1}'${7:, setter='${8:set_$1}'}${9:, searcher='${10:search_$1}'})${11}
endsnippet

snippet stin "States Invisible" i
states={'invisible': ${1:pyson_expr}},${2}
endsnippet

snippet stre "States Readonly" i
states={'readonly': ${1:pyson_expr}},${2}
endsnippet

snippet trcl "Tryton Class" b
class ${1:class_name}(${2}):
    '${3:class_fancy_name}'

    __name__ = '${4:model_name}'${5}
endsnippet

snippet ctx "Context" i
context={'${1:value_name}': ${2:value}},${3}
endsnippet

snippet Pg "Pool().get(...)" b
${1:var_name} = Pool().get('${2:model_name}')${3}
endsnippet

snippet pg "pool.get(...)" b
${1:var_name} = pool.get('${2:model_name}')${3}
endsnippet

snippet pp "Pool -> pool.get" b
pool = Pool()
${1:Model} = pool.get('${2:model}')${3}
endsnippet

snippet trco "Transaction().context" i
Transaction().context${1}
endsnippet

snippet trcog "Transaction().context.get(...)" b
${1:var_name} = Transaction().context.get('${2:value}')${3}
endsnippet

snippet trcb "Print Traceback" b
import traceback
traceback.print_stack()
endsnippet

snippet dm "Domain" i
domain=[
    ('${1:attribute_name}', '${2:operand}', ${3:value}),${4}
],${5}
endsnippet

snippet get1 "Get one instance from domain" b
${1:var_name}, = ${2:model_name}.search([
        ('${3:field}', '${4:=}', ${5:value})${6},
        ]${7:, limit=1})${8}
endsnippet

snippet dep "@field.depends(...)" b
@fields.depends('${1}'${2:, ${3}})
${4}
endsnippet

snippet oc "def on_change_...(self):" b
def on_change_${1}(self):
    ${2}
endsnippet

snippet ocw "def on_change_with_...(self, name?):" b
def on_change_with_${1}(self${2:, ${3:name=None}}):
    ${3}
endsnippet

snippet ermes "cls._error_messages.update(..." b
cls._error_messages.update({
        '${1}': '${2}',${3}
        })${4}
endsnippet

snippet sep "print '#########..." b
print '#' * 80
print '${1:%s}'${2}
endsnippet

snippet defdef "def default_...(cls):" b
@classmethod
def default_${1:field_name}(cls):
    ${2}return ${3}
endsnippet

snippet __init__ "Tryton __init__ header"
from trytond.pool import Pool
from .${1:Filename} import *


def register():
    Pool.register(
        ${2:class_name},${3}
        module='${4:$1}', type_='${5:model}')${6}
endsnippet

snippet req "required=..." i
required=${1:True},${2}
endsnippet

snippet ondel "ondelete=..." i
ondelete='${1:CASCADE}',${2}
endsnippet

snippet defget "def getter_...(cls, instances, name):" b
@classmethod
def getter_${1:field_name}(cls, instances, name):
    pool = Pool()
    ${2:OtherModel} = pool.get('${3:other.model}')
    ${4:table} = cls.__table__()
    ${5:other_table} = $2.__table__()

    result = {x.id: None for x in instances}
    cursor = Transaction().connection.cursor()
    query = $4.join($5,
        condition=${6:$4.${7:$5} == $5.id}
        )

    # from trytond.tools import grouped_slice, cursor_dict
    for slice in grouped_slice(instances):
        cursor.execute(*query.select($4.id, ${8:value},
                where=$4.id.in_([x.id for x in slice])
                ))

        for ${9:$4_id}, ${10:value} in cursor.fetchall():
            result[$9] = $10

    return result
endsnippet
