*tryton.txt* Vim tools to develop on the tryton framework

Version: 1.0
Author : Jean Cavallo <jean.cavallo@hotmail.fr>
License: MIT license  {{{
    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files (the
    "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:
    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}}}

CONTENTS                                            *tryton-contents*

Introduction                                        |tryton-introduction|
Install                                             |tryton-install|
Usage                                               |tryton-usage|
    Tools                                           |tryton-tools|
    Searching                                       |tryton-searching|
    Unite Sources                                   |tryton-sources|
Variables                                           |tryton-variables|
Mappings                                            |tryton-mappings|

==============================================================================
INTRODUCTION                                        *tryton-introduction*

*tryton-vim* is dedicated to helping developers using the tryton
(http://www.tryton.org) framework. The available features are :
    - Filetype detection for python and xml files which are part of a tryton
      project
    - Specific indentation file for python files which match the project
      guidelines
    - Syntax and Folding files for python files
    - Xml validation / formatting (requires xmllint available)
    - Code Snippets (requires *UltiSnips* )
    - Code Search Patterns (requires *unite* )

==============================================================================
INSTALL                                             *tryton-install*

Install the distributed files into your Vim script directory which is usually
~/.vim/. You should consider to use one of the famous package managers for Vim
like vundle or neobundle to install the plugin.

==============================================================================
USAGE                                               *tryton-usage*

Filetype detection, indentation, syntax and folding are automatically done
when editing python or xml files which are part of a tryton project.
Detection is performed by looking for the "tryton" keyword in the file (which
covers 90% of the use cases). Another test is performed on xml files because
they can be view descriptors, which usually do not contains the "tryton" word

-----------------------------------------------------------------------------
TOOLS                                               *tryton-tools*

tryton#tools#ValidateXml(view_type)                 *tryton-validate-xml*

    Performs rng validation for the given view_type, which must be one of
    "form", "tree" or "graph". This requires the
    *g:tryton_trytond_default_path* to be properly set to behave correctly.

    Command line output indicates the detected errors.

    TODO: map errors to location list

tryton#tools#FormatXML()                            *tryton-format-xml*

    Format the current xml file using xmllint

-----------------------------------------------------------------------------
SEARCHING                                           *tryton-searching*

tryton#search#SearchClass()                         *tryton-search-class*

    Prompts the user for a class name, and uses unite to perform a search for
    this class.

tryton#search#SearchModel()                         *tryton-search-model*

    Prompts the user for a model name, and uses unite to perform a search for
    this model. It does so by searching the "__name__ = '<model_name>'
    pattern.

tryton#search#SearchFunction()                      *tryton-search-function*

    Prompts the user for a function name, and uses unite to search for
    all function definitions matching the name.

tryton#search#SearchField()                         *tryton-search-field*

    Prompts the user for a field name, and use unite to perform a search for
    this field.

tryton#search#SearchMany2One(include_functions)     *tryton-search-many2one*

    Prompts the user for a model name, and use unite to perform a search for
    all Many2One fiels that refers to this model. The "include_functions"
    parameter must be True to include function fiels in the search

tryton#search#SearchOne2Many(include_functions)     *tryton-search-one2many*

    Prompts the user for a model name, and use unite to perform a search for
    all One2Many fiels that refers to this model. The "include_functions"
    parameter must be True to include function fiels in the search

-----------------------------------------------------------------------------
SOURCES                                             *tryton-sources*

This plugin adds two sources for unite. Those sources are designed to connect
to a running tryton server to extract informations about the model. They
requires that the "debug" module be installed on the server. It also requires
python available in vim (it uses the shipped in tryton_browser script) and
proteus available.

The sources use a cache to avoid too many requests to the server, so the first
call on a new vim instance (or force refresh using *unite-redraw* ) may be
slow.

The server must be available using the xml_rpc protocol enabled, and some
configuration is required on the vim side (see *tryton-variables* ). Any non
configured information (typically the server password) will be asked and
stored once at runtime.

The main available source is "tryton_details". You can invoke it with :
>
   :Unite tryton_details
>
By default (no arguments), the source displays all models in the database.
This source accepts as a first argument a "/" separated path inside the tryton
model. So for instance, using :
>
   :Unite tryton_details:account.account/fields
>
will display the list of the fields of the "account.account" model. The
default action on tryton_details is "go_down", which means "browse further".
So hitting <Enter> on a model candidate will display its details, and also
some nested fields you can go further into, like "fields" or "mro".

Some useful commands :
>
    " Displays all models
    :Unite tryton_details

    " Displays all data on the account.account model
    :Unite tryton_details:account.account

    " List all fields of model account.account
    :Unite tryton_details:account.account/fields

    " Specific info on the name field of account.account model
    :Unite tryton_details:account.account/fields/name

    " Show the class order for account.account (with modules override !)
    :Unite tryton_details:account.account/mro

The "mro" candidates are jumpable (though the default action is still "go
down") so you can use the action menu to jump in.

Another source that may be useful is the "tryton_field" source. It is used to
directly access the list of all field definitions in the database. Typical
usage would be :

>
    :UniteWithCursorWord tryton_field


==============================================================================
VARIABLES                                           *tryton-variables*

g:tryton_trytond_default_path                   *g:tryton_trytond_default_path*

        This variable is used to declare the location of the trytond folder.
        It is necessary for xml validation features, as we use the rng
        validation files from this folder. It also allows to easily jump in
        to class definition in the mro source.

        If not set, it will try to use the installed trytond in virtualenv,
        and fail if not available

        default: not set

g:tryton_server_host_name                           *g:tryton_server_host_name*

        Set the tryton server to connect to.

        default: Not set

g:tryton_server_port                                *g:tryton_server_port*

        Set the tryton server port.

        default: Not set

g:tryton_server_database                            *g:tryton_server_database*

        Set the tryton database to connect to.

        default: Not set

g:tryton_server_login                               *g:tryton_server_login*

        Set the login to use to connect to the server

        default: Not set

g:tryton_server_password                            *g:tryton_server_password*

        Used to store the user password to connect to the server.

        Warning : Though it may be useful to set this in your vimrc, make sure
        the password is not that of a critical / production server.

        default: Not set

g:tryton_default_mappings                           *g:tryton_default_mappings*

        Set to 0 to manually manage plugin mappings

        default: 1

g:tryton_xml_indent                                 *g:tryton_xml_indent*

        Defines the indentation to use for xml formatting.

        default: "    "

g:tryton_grep_command                               *g:tryton_grep_command*

        The base command to use for search features

        default: 'Unite grep:.:-inR:'

g:tryton_grep_options                               *g:tryton_grep_options*

        The options to use for search features

        default: " -auto-preview -no-split -no-empty"

==============================================================================
MAPPINGS                                            *tryton-mappings*

You can remap the following mappings to suit your needs the default mappings
are not good for you :

<Plug>(tryton-validate-xmlform)             *<Plug>(tryton-validate-xmlform)*

    Performs rng validation of form views. See *tryton-validate-xml*

<Plug>(tryton-validate-xmltree)             *<Plug>(tryton-validate-xmltree)*

    Performs rng validation of tree views. See *tryton-validate-xml*

<Plug>(tryton-validate-xmlgraph)            *<Plug>(tryton-validate-xmlgraph)*

    Performs rng validation of graph views. See *tryton-validate-xml*

<Plug>(tryton-xml-format)                   *<Plug>(tryton-xml-format)*

    Uses xmllint to format the current xml file

<Plug>(tryton-search-class)                 *<Plug>(tryton-search-class)*

    Search the current directory for the given Class name.

    See *tryton-search-class*

<Plug>(tryton-search-model)                 *<Plug>(tryton-search-model)*

    Search the current directory for the given model name definitions.

    See *tryton-search-model*

<Plug>(tryton-search-field)                 *<Plug>(tryton-search-field)*

    Search the current directory for a field description matching the given
    field name.

    See *tryton-search-field*

<Plug>(tryton-search-function)              *<Plug>(tryton-search-function)*

    Search the current directory for a function definition matching the
    provided function name.

    See *tryton-search-function*

<Plug>(tryton-search-many2one)              *<Plug>(tryton-search-many2one)*

    Search the current directory for Many2One fields pointing to the given
    model name.

    See *tryton-search-many2one*

<Plug>(tryton-search-one2many)              *<Plug>(tryton-search-one2many)*

    Search the current directory for One2Many field using the given model
    name.

    See *tryton-search-one2many*

<Plug>(tryton-searchall-many2one)           *<Plug>(tryton-searchall-many2one)*

    Same as *<Plug>(tryton-search-many2one)* but includes function fields.

    See *tryton-search-many2one*

<Plug>(tryton-searchall-one2many)           *<Plug>(tryton-searchall-one2many)*

    Same as *<Plug>(tryton-search-one2many)* but includes function fields.

    See *tryton-search-one2many*

<Plug>(tryton-browse-current-model)     *<Plug>(tryton-browse-current-model)*

    Start the *tryton-details* source on the current model

Mappings that are set if *g:tryton_default_mappings* is set are :

>
    <Leader>xf          <Plug>(tryton-validate-xmlform)
    <Leader>xt          <Plug>(tryton-validate-xmltree)
    <Leader>xg          <Plug>(tryton-validate-xmlgraph)
    <Leader>xx          <Plug>(tryton-xml-format)
    <Leader>ac          <Plug>(tryton-search-class)
    <Leader>an          <Plug>(tryton-search-model)
    <Leader>ad          <Plug>(tryton-search-function)
    <Leader>af          <Plug>(tryton-search-field)
    <Leader>arm         <Plug>(tryton-search-many2one)
    <Leader>aro         <Plug>(tryton-search-one2many)
    <Leader>arfm        <Plug>(tryton-searchall-many2one)
    <Leader>arfo        <Plug>(tryton-searchall-one2many)
    <Leader>bcm         <Plug>(tryton-browse-current-model)

==============================================================================
